version: "3"

networks:
  app-tier:
    driver: bridge

services:
  mission-service:
    container_name: mission-service
    image: "marsy/mission-service"
    restart: always
    ports:
      - 3001:8080
    depends_on:
      - weather-service
      - rocket-department-service
      - telemetry-service
      - payload-service
      - rocket-hardware-mock-service
      - stage-hardware-mock-service
      - payload-hardware-mock-service
      - executive-service
      - postgres
      - kafka

  weather-service:
    container_name: weather-service
    image: "marsy/weather-service"
    restart: always
    ports:
      - 3000:8080
    depends_on:
      - kafka

  rocket-department-service:
    container_name: rocket-department-service
    image: "marsy/rocket-department-service"
    restart: always
    ports:
      - 3002:8080

  telemetry-service:
    container_name: telemetry-service
    image: "marsy/telemetry-service"
    restart: always
    ports:
      - 3003:8080
    environment:
      - POSTGRES_HOST=postgres:5432
    depends_on:
      - postgres

  payload-service:
    container_name: payload-service
    image: "marsy/payload-service"
    restart: always
    ports:
      - 3004:8080
    environment:
      - POSTGRES_HOST=postgres-payload:5432
    depends_on:
      - postgres-payload

  rocket-hardware-mock-service:
    container_name: rocket-hardware-mock-service
    image: "marsy/rocket-hardware-mock-service"
    restart: always
    ports:
      - 3005:8080

  stage-hardware-mock-service:
    container_name: stage-hardware-mock-service
    image: "marsy/stage-hardware-mock-service"
    restart: always
    ports:
      - 3010:8080

  payload-hardware-mock-service:
    container_name: payload-hardware-mock-service
    image: "marsy/payload-hardware-mock-service"
    restart: always
    ports:
      - 3009:8080

  executive-service:
    container_name: executive-service
    image: "marsy/executive-service"
    restart: always
    ports:
      - 3008:8080

  logs-service:
    container_name: logs-service
    image: "marsy/logs-service"
    ports:
      - 3011:8080
    environment:
      - POSTGRES_HOST=postgres-logs:5432
    depends_on:
      - postgres-logs

  webcaster-service:
    container_name: webcaster-service
    image: "marsy/webcaster-service"
    restart: always
    ports:
      - 3013:8080

  # the postgres DB to be connected to the backend (watch out: no volume specified, everything can be lost)
  postgres:
    image: postgres:15.2
    container_name: database-telemetry
    environment:
      - POSTGRES_PASSWORD=postgrespass
      - POSTGRES_USER=postgresuser
      - POSTGRES_DB=database-telemetry
    ports:
      - 3006:5432

  postgres-payload:
    image: postgres:15.2
    container_name: database-payload
    environment:
      - POSTGRES_PASSWORD=postgrespass
      - POSTGRES_USER=postgresuser
      - POSTGRES_DB=database-payload
    ports:
      - 3007:5432

  postgres-logs:
    image: postgres:15.2
    environment:
      - POSTGRES_PASSWORD=postgrespass
      - POSTGRES_USER=postgresuser
      - POSTGRES_DB=database-logs
    ports:
      - 3012:5432

  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - app-tier
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes