version: "3"

networks:
  app-tier:
    driver: bridge

services:
  kafka:
    hostname: kafka
    image: 'bitnami/kafka:latest'
    networks:
      - app-tier
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes

  mission-service:
    container_name: mission-service
    image: "marsy/mission-service"
    restart: always
    ports:
      - 3001:8080
    depends_on:
      - weather-service
      - rocket-department-service
      - telemetry-service
      - telemetry-reader-service
      - payload-service
      - rocket-hardware-mock-service
      - stage-hardware-mock-service
      - payload-hardware-mock-service
      - executive-service
      - logs-service
      - webcaster-service
      - robot-department-service
      - robot-hardware-mock-service
      - scientific-department-service
      - postgres-telemetry
      - postgres-telemetry-slave
      - postgres-logs
      - postgres-payload
      - kafka
    networks:
      - app-tier

  weather-service:
    container_name: weather-service
    image: "marsy/weather-service"
    restart: always
    ports:
      - 3000:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  rocket-department-service:
    container_name: rocket-department-service
    image: "marsy/rocket-department-service"
    restart: always
    ports:
      - 3002:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  telemetry-service:
    container_name: telemetry-service
    image: "marsy/telemetry-service"
    restart: always
    ports:
      - 3003:8080
    environment:
      - POSTGRES_HOST=postgres-telemetry:5432
    depends_on:
      - postgres-telemetry
      - kafka
    networks:
      - app-tier

  telemetry-reader-service:
    container_name: telemetry-reader-service
    image: "marsy/telemetry-reader-service"
    restart: always
    ports:
      - 3017:8080
    environment:
      - POSTGRES_HOST=postgres-telemetry-slave:5432
    depends_on:
      - postgres-telemetry-slave
    networks:
      - app-tier

  payload-service:
    container_name: payload-service
    image: "marsy/payload-service"
    restart: always
    ports:
      - 3004:8080
    environment:
      - POSTGRES_HOST=postgres-payload:5432
    depends_on:
      - postgres-payload
      - kafka
    networks:
      - app-tier

  rocket-hardware-mock-service:
    container_name: rocket-hardware-mock-service
    image: "marsy/rocket-hardware-mock-service"
    restart: always
    ports:
      - 3005:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  stage-hardware-mock-service:
    container_name: stage-hardware-mock-service
    image: "marsy/stage-hardware-mock-service"
    restart: always
    ports:
      - 3010:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  payload-hardware-mock-service:
    container_name: payload-hardware-mock-service
    image: "marsy/payload-hardware-mock-service"
    restart: always
    ports:
      - 3009:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  executive-service:
    container_name: executive-service
    image: "marsy/executive-service"
    restart: always
    ports:
      - 3008:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  logs-service:
    container_name: logs-service
    image: "marsy/logs-service"
    ports:
      - 3011:8080
    environment:
      - POSTGRES_HOST=postgres-logs:5432
    depends_on:
      - postgres-logs
      - kafka
    networks:
      - app-tier

  webcaster-service:
    container_name: webcaster-service
    image: "marsy/webcaster-service"
    restart: always
    ports:
      - 3013:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  robot-department-service:
    container_name: robot-department-service
    image: "marsy/robot-department-service"
    restart: always
    ports:
      - 3014:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  robot-hardware-mock-service:
    container_name: robot-hardware-mock-service
    image: "marsy/robot-hardware-mock-service"
    restart: always
    ports:
      - 3015:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  scientific-department-service:
    container_name: scientific-department-service
    image: "marsy/scientific-department-service"
    restart: always
    ports:
      - 3016:8080
    depends_on:
      - kafka
    networks:
      - app-tier

  # the postgres DB to be connected to the backend (watch out: no volume specified, everything can be lost)
  postgres-telemetry:
    image: 'bitnami/postgresql:latest'
    container_name: database-telemetry
    restart: always
    environment:
      - POSTGRESQL_PASSWORD=postgrespass
      - POSTGRESQL_USER=postgresuser
      - POSTGRESQL_DATABASE=database-telemetry
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
    ports:
      - 3006:5432
    volumes:
      - ./log-directory-master:/var/lib/postgresql/data
    networks:
      - app-tier

  postgres-telemetry-slave:
    image: 'bitnami/postgresql:latest'
    container_name: database-telemetry-slave
    restart: always
    depends_on:
      - postgres-telemetry
    environment:
      - POSTGRESQL_USER=postgresuser
      - POSTGRESQL_PASSWORD=postgrespass
      - POSTGRESQL_MASTER_HOST=postgres-telemetry
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
    ports:
      - 3018:5432
    volumes:
      - ./log-directory-slave:/var/lib/postgresql/data
    networks:
      - app-tier

  postgres-payload:
    image: postgres:15.2
    container_name: database-payload
    restart: always
    environment:
      - POSTGRES_PASSWORD=postgrespass
      - POSTGRES_USER=postgresuser
      - POSTGRES_DB=database-payload
    ports:
      - 3007:5432
    networks:
      - app-tier

  postgres-logs:
    image: postgres:15.2
    restart: always
    environment:
      - POSTGRES_PASSWORD=postgrespass
      - POSTGRES_USER=postgresuser
      - POSTGRES_DB=database-logs
    ports:
      - 3012:5432
    networks:
      - app-tier